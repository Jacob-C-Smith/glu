/** !
 * x86 Global Descriptor Table
 * 
 * @file src/x86/VGA.h
 * 
 * @author Jacob Smith
 */

// Header guard
#pragma once

// Includes
#include "../glu/definitions.h"

// Enumeration definitions
enum segment_access_bits_e
{
    SEGMENT_ACCESS_PRESENT_MASK = 0b10000000,
    SEGMENT_ACCESS_PRESENT      = 0b10000000,
    SEGMENT_ACCESS_ABSENT       = 0b00000000,
    
    SEGMENT_ACCESS_PRIVILEGE_MASK   = 0b01100000,
    SEGMENT_ACCESS_PRIVILEGE_KERNEL = 0b00000000,
    SEGMENT_ACCESS_PRIVILEGE_USER   = 0b01100000,    

    SEGMENT_ACCESS_TYPE_MASK       = 0b00010000,
    SEGMENT_ACCESS_TYPE_TASK_STATE = 0b00000000,    
    SEGMENT_ACCESS_TYPE_CODE_DATA  = 0b00010000, 

    SEGMENT_ACCESS_CODE_DATA_MASK = 0b00001000,
    SEGMENT_ACCESS_CODE_DATA_DATA = 0b00000000,    
    SEGMENT_ACCESS_CODE_DATA_CODE = 0b00001000,

    SEGMENT_ACCESS_DATA_GROWS_MASK  = 0b00001000,
    SEGMENT_ACCESS_DATA_GROWS_UP    = 0b00000000,    
    SEGMENT_ACCESS_DATA_GROWS_DOWN  = 0b00001000,

    SEGMENT_ACCESS_CONFORMING_DIRECTION_MASK = 0b00000100,
    SEGMENT_ACCESS_CODE_LOWER_PRIVILEGE      = 0b00000100, 
    SEGMENT_ACCESS_CODE_EQUAL_PRIVILEGE      = 0b00000000, 

    SEGMENT_ACCESS_READ_WRITE_MASK  = 0b00000010,
    SEGMENT_ACCESS_CODE_READ_LOCK   = 0b00000000,
    SEGMENT_ACCESS_CODE_READ_ALLOW  = 0b00000010,
    SEGMENT_ACCESS_DATA_WRITE_LOCK  = SEGMENT_ACCESS_CODE_READ_LOCK, 
    SEGMENT_ACCESS_DATA_WRITE_ALLOW = SEGMENT_ACCESS_CODE_READ_ALLOW,
    
    SEGMENT_ACCESS_ACCESSED_MASK = 0b00000001,
    SEGMENT_ACCESS_ACCESSED      = 0b00000001,
    SEGMENT_ACCESS_UNACCESSED    = 0b00000000,
    
    SEGMENT_ACCESS_NULL        = 0,
    
    SEGMENT_ACCESS_KERNEL_CODE = SEGMENT_ACCESS_PRESENT | SEGMENT_ACCESS_PRIVILEGE_KERNEL | SEGMENT_ACCESS_TYPE_CODE_DATA | SEGMENT_ACCESS_DATA_GROWS_DOWN | SEGMENT_ACCESS_DATA_WRITE_ALLOW,
    SEGMENT_ACCESS_KERNEL_DATA = SEGMENT_ACCESS_PRESENT | SEGMENT_ACCESS_PRIVILEGE_KERNEL | SEGMENT_ACCESS_TYPE_CODE_DATA | SEGMENT_ACCESS_DATA_WRITE_ALLOW,

    SEGMENT_ACCESS_USER_CODE = SEGMENT_ACCESS_PRESENT | SEGMENT_ACCESS_PRIVILEGE_USER | SEGMENT_ACCESS_TYPE_CODE_DATA | SEGMENT_ACCESS_DATA_GROWS_DOWN | SEGMENT_ACCESS_DATA_WRITE_ALLOW,
    SEGMENT_ACCESS_USER_DATA = SEGMENT_ACCESS_PRESENT | SEGMENT_ACCESS_PRIVILEGE_USER | SEGMENT_ACCESS_TYPE_CODE_DATA | SEGMENT_ACCESS_DATA_WRITE_ALLOW,
};

enum gdt_flag_bits_e
{
    GDT_FLAG_GRANULARITY_MASK = 0b1000,
    GDT_FLAG_GRANULARITY_BYTE = 0b0000,
    GDT_FLAG_GRANULARITY_PAGE = 0b1000,
    
    GDT_FLAG_MODE_MASK    = 0b0110,
    GDT_FLAG_MODE_16_BIT  = 0b0000,
    GDT_FLAG_MODE_32_BIT  = 0b0100,
    GDT_FLAG_MODE_64_BIT  = 0b0010,
    GDT_FLAG_MODE_INVALID = 0b0110,
};

// Structure definitions
struct gdt_segment_descriptor_s
{
    void *p_base,
         *p_limit;
    u8    access,
          flags;
};

typedef struct gdt_segment_descriptor_s gdt_segment_descriptor;

int gdt_segment_descriptor_construct
(
    gdt_segment_descriptor *p_gdt_segment_descriptor,
    void                   *p_base,
    void                   *p_limit,
    enum gdt_flag_bits_e    access,
    enum gdt_flag_bits_e    flags
);

int gdt_segment_descriptor_print ( gdt_segment_descriptor *p_gdt_segment_descriptor );
